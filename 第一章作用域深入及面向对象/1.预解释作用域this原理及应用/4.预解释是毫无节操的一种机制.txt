//预解释是毫无节操的一种机制

//判断num是否为window这个对象的一个属性,是的话返回true,不是的话返回false
var obj = {name:"张三",age:17};

//1.预解释的时候不管条件是否成立,都要把带var的进行提前声明(if)
//window:var num;->window.num
console.log("name" in obj)//true
if(!("num" in window)){//"num" in window true ---false条件不成立
   var num = 12;
}
console.log(num) //->undefined


//2.
fn()
function fn(){
  console.log("ok")
}
fn();


2.预解释时,只预解释=左边的,右边的是值,不参与预解释
把函数定义部分赋值给一个变量
//匿名函数值函数表达式:把函数定义的部分当做一个值赋值给我们的变量
//window下的预解释:var fn;
fn();//只是声明了一个值,没有定义
var fn=function(){
console.log("ok")
}

undefined() Uncaught TypeError:fn is not a function
//3.执行函数定义的那个function在全局作用域下不进行预解释,当代码执行到这个位置的
时候定义和执行一起完成了
//自执行函数:定义和执行一起完成
(function(num){})(100)

//4.函数体中return中下面的代码虽然不再执行了,但是需要预解释;
return后面都是返回的值,所以不进行预解释
function fn(){
//预解释:var num;
  console.log(num);//undefined
  return function(){
}
var num = 100;
}
fn();


//5.在预解释的时候,如果名字已经声明过了,不需要从新声明,但是需要重新赋值；
在js中如果变量的名字和函数的名字重复了,也算冲突

var fn = 13;
function fn(){
    console.log("ok")
}

//window预解释:
//声明+定义 fn=xxxfff111
//声明 var fn; (不需要重新声明)
//声明 + 定义 fn=xxxfff222
//->fn=xxxfff222
fn()//2
function fn(){console.log(1)};
fn();//2
var fn=10;//->fn = 10
fn();//->10() Error:fn is not a function 上面代码报错了就不执行了
function fn(){console.log(2);};
fn();
