JS中的数据类型:
//基本数据类型
//number,string,boolean,null,undefined

//引用数据类型
//object:{},[],/^$/,Date
//function

//基本数据类型是按照值来操作的,引用数据类型是按照引用地址操作的

//当浏览器加载HTML页面的时候,首先会提供一个供全局JS代码执行的环境->全局作用域(global/window)
/window浏览器对象,全局作用域
//对象
把值直接赋值给变量
var num = 12;
                               //首先开辟新的内存空间
                               xxxfff000
                             把属性名和属性值存进去
                             name:"朱峰培训"
                             age:7
var obj = xxxfff000;
                             obj.age = 8
                             首先通过地址xxxfff000找到对应的空间,然后把空间中age属性名对应的属性值
                             修改为8

//函数
fn = xxxfff111,fn存储的是一个地址,代表的是当前函数整体,整个作用域，空间
//首先开辟一个地址
xxxfff111
//把函数体当中的代码当做字符串存储起来
"console.log(123)"

console.log(fn);//整个函数的定义部分(函数本身)在控制台输出
console.log(fn());//->把当前函数执行的返回结果(return返回是啥就是啥,没有retunr就是undefined)
return没有返回就是undefined

//2.预解释(浏览器内置的机制)
//在当前的作用域中,JS代码执行之前,浏览器首先会把所有带var和function的进行声明或定义
//1)理解声明和定义
//var num = 12;
//声明(declare):var num;告诉浏览器在全局作用域有一个num变量了
//定义(defined):num = 12->给我们的变量进行赋值

//2)对于var和function关键字在预解释的时候操作还是不一样的
//var ->在预解释的时候只是提前的声明
//function ->在预解释的时候提前声明+定义都完成了
var num = 12;
function fn(num1,num2){
  var total = num1 + num2;
  console.log(total)
}
1.当浏览器加载HTML页面时会提供一个全局作用域
2.在代码执行之前会进行预解释 函数定义,开辟一个新的内存空间xxxfff000
 "var total = num1 +num2;
  console.log(total)"

var num var obj;fn = xxxfff000; 

3）预解释只发生在当前的作用域下,例如开始只对window进行预解释,只有函数执行的时候,才会对
函数中的进行预解释,预解释又叫做(变量提升)浏览器天生自带的一个行为

预解释完成之后,让全局下
num =12;
obj = {}    开辟新的内存空间 xxxfff111 name:"朱峰培训" age:7
函数在变量提升时,已经进行了定义,当前一共有三个内存空间,全局作用域,对象,函数
3.JS中内存的分类
//栈内存:用来提供一个供JS代码执行的环境
//堆内存:用来存储引用数据类型的值 ->对象存储的是属性名和属性值,函数存储的是代码字符
串

预解释发生在栈内存里面
在12行之前console.log(num),返回的结果是null,如果一个变量只是声明了,没有赋值,默认值
是undefined
在函数声明之前调用函数也可以执行,因为存在变量提升,预解释,声明加定义就完成了




