var oBtn = document.getElementById("btn");
var spanNum = document.getElementById("spanNum");
//1.自己形成一个不销毁的作用域来保存我们需要累加的数字
function(){
 var count = 0;
 oBtn.onclick = function(){
 count ++;
 spanNum.innerHTML = count;
}
}

//点击时,程序已经执行完成,count已经变成1了
oBtn.onclick = (function(){
  var count = 0;
  return function(){
  count++;
  span.innerHTML = count;
}
})();

//弊端,有一个不销毁的私有作用域,所以占内存
//3.利用innerHTML的方式处理:每一点击的时候都获取最新的值,然后累加,最后把结果重新
放回去
oBtn.onClick = funtion(){
  //spanNum.innerHTML 获取页面中的内容返回的是一个字符串
  spanNum.innerHTML++;
}
//弊端:每一次都需要把页面中的内容先转换为字符串,累加完在重新添加回去,当重新添加的时候,浏览器
都要重新渲染一下
//4.利用自定义属性存储(推荐)
oBtn.count = 0;
oBtn.onclick = funtion(){
  span.innerHTML = ++this.count
}