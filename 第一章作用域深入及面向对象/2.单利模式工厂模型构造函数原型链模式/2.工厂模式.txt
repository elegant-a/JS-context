var jsPerson2 = {
  name:"尹华芝",
  age:18,
  writeJS；function(){
  console.log("my name is" this.name +",i can write JS")
}
}

//单例模式虽然解决了分组的作用,但是不能实现批量生成,属于手工模式
->工厂模式
//把实现同一件事情的相同代码放到一个函数中,以后如果在想实现这个功能,不需要从新的
编写这些代码来了,只需要执行当前的函数即可--->"函数的封装" -->"低耦合高内聚":减少页面
中的冗余代码,提高代码的重复利用率
function createJsPerson(name,gae){
  var obj={};
  obj.name=name;
  obj.age=age;
  obj.writeJS = function(){
     console.log("my name is" + this.name +",i can write JS")
}
return obj;
}

//JS是一门轻量级的脚本"编程语言"(HTML+CSS不属于编程语言,属于标记语言)
//后台语言 .net C# php Java c c++ vb vf object-c python 
//所有的编程语言都是面向对象开发的->类的继承,封装,多态
//继承:子类继承父类中的属性和方法
//多态:当前方法的多种形态
//后台语言当中:多态包含 重载和重写
//JS当中有多态,但不存在重载,方法名一样,后面的会把前面的覆盖掉,最后只保留一个
//"JS"中有一个操作类似重载,但不是重载":我们可以根据传递参数的不一样的,实现不同的功能"
function sum(num){
if(typeof num === "undefined"){
 return 0
}
return num;
}
sum(100);
sum();
//重写:子类重写父类的方法
public_void sum(int_num1,int_num2{

})
public void sum(String num1,int num2)
var p1 = createPerson("王小波",48)
