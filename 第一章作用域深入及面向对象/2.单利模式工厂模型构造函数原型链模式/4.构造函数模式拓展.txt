function Fn(){
      this.x = 100;
      this.getX = function(){
      this需要看getX执行的时候才知道
      console.log(this.x);
}
}

var f1 = new Fn();
f1.getX();//方法中this是f1 ->100
var ss= f1.getX;
ss();//方法中this是window->undefined
//1.在构造函数模式中 new Fn()执行,如果Fn不需要传递参数的话,后面的小括号可以省略
//2.


function Fn(){
      var num = 10;
      this.x = 100;
      this.getX = function(){
      this需要看getX执行的时候才知道
      console.log(this.x);
}
}

var f1 = new Fn();
var f2 = new Fn();
console.log(f1.num)//undefined
//3.类有函数普通的一面,当函数执行的时候,var num其实只是当前形成的私有作用域的私有
变量而已,它和我们的f1这个实例没有任何关系;只有this.xxx=xxx才相当于给f1这个实例
增加私有的属性和方法,才和我们的f1有关系...
console.log(f1);
//4.在构造函数模式中,浏览器会默认的把我们的实例返回(返回的是对象
类型值,如果我们自己写了return返回:
//返回的是基础类型值,当前实例是不变的,例如:return 100
我们的f1还是Fn类的实例
//返回的是一个引用类型的值，当前的实例会被自己的返回的值给
替换掉,例如
)
//5.检测某 一个实例是否属于这个类->instanceof
console.log(f1 instanceof Fn)//true
console.log(f1 instanceof Array);//false
console.log(f1 instanceof Object);//->true  因为所有的
实例都是对象是数据类型的,而每一个对象数据类型都是Obect内置类大的一个
实例,所以f1也是他们的一个实例
     //对于检测侧数据类型来说,typeof有自己的局限性,不能细分object下的对象,数组,正则...
     //var a = [];
     //console.log(a instanceof Array);//true 说明a是一个数组
//6.f1和f2都是Fn这个类的一个实例,都拥有x和getX两个属性,但是这两个属性是各自私有的属性
所以:
    console.log(f1.getX === f2.getX);//false

//in检测某一个属性是否属于这个对象 attr in object
console.log("getX" in f1);//->true 是它的一个属性,
不管是私有的属性,还是公有的属性,只要存在,用in来检测都是true

//hasOwnProperty:用来检测某一个属性是否为这个对象的
私有属性,这个方法只能检测私有的属性
console.log(f1.hanOwnProperty("getX"))//true
"getX是f1"的私有属性
//思考:检测某一个属性是否为该对象的"公有属性"hasPubProperrty
function hasPubProperty(obj,attr){
//首先是它的一个属性,然后不是它的私有属性
    return (attr in obj) && !obj.hasOwnProperty(attr)
}
console.log(hasPubProperrty(f1,"getX"));//false

//7.isPrototypeof 自己回去百度搜索

