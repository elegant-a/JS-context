//在原型模式中,this常用的有两种情况:
//在类中this.xxx=xxx;this->当前类的实例
//某一个方法中的this->看执行的时候"."前面是谁就是谁
//1)先确定this的指向(this是谁)
//2)把this替换成对应的代码
//3)按照原型链查找的机制,一步步的查找结果
function Fn(){
   this.x = 100
   this.y = 200
   this.getY = function(){
    console.log(this.y)
}
}
Fn.prototype = {
  constructor:Fn,
  y:300,
  getX:function(){
  console.log(this.x)
},
getY:function(){
 console.log(this.y)
}
}
var f =new Fn;
f.getX();//执行公有的方法 //->100 ->console.log(f.x) -> 100
//忽略私有的直接查找共有的,所以最后的结果是undefined
f.__proto__.getX();//->this是f.__proto__ ->console.log(f.__proto__.x)

Fn.prototype.getX();//undefined 相当于console.log(Fn.prototype.get.x)

f.getY();200
f.__proto__.getY();//console.log(f.__proto__.y)-->300

prototype是函数的一个属性
__proto__指向的是当前实例所属类的原型-->prototype

//在内置类的原型上扩展我们的方法
Array.prototype.myUnique = function (){
  //this->ary
  var obj = {};
  for(let i = 0;i<this.length;i++){
  var cur = this[i]
  if(obj[cur] == cur){
  this[i] == this[this.lentght - 1]
  this.pop()
  i--;
}
else{
obj[cur] = cur
}
}
//释放内存
obj = null;
return this;//目的是为了实现链式写法
}
//内置类都是函数数据类型
var ary = [];
//调用数组上原型的方法
ary.myUnique();
Array.prototype.myUnique();
//链式写法:执行完成数组的一个写法,紧接着可以执行下一个方法
//原理:
//ary为什么可以使用sort方法? ->因为sort是Array.Proptptype上的一个公有方法
//所以ary可以使用sort方法 ->只有Array的实例才可以使用//数组才能使用我们Array原型
上定义的属性和方法
    //sort执行完成的返回值是一个排序后的数组  
    //reverse执行完成的返回值是一个数组,可以继续执行pop
    //pop执行完成的返回值是被删除的哪个元素,不是一个数组了

var ary = [12,23,23,13,12,13,23,13,12];
ary.myUnique().sort
ary.sort(function(a,b){
  return a - b 
}).reverse().pop();
ary.myUnique().sort(function(a,b){
    return a - b;
})
console.log(ary)

1.//在在数组的原型上有一个方法叫做slice,我们要求大家自己回去后自己实现一个方法
mySlice,要求和原来的slice功能一模一样
Array.prototype.mySlice=function(){
  <js code>
}

考虑的情况:
slice(n,m)
slice(n)
slice()
n和m是负数
n<m
n和m的值超过数组的长度了

不能使用数组内置的方法,比如添加不能使用push 而使用
ary[ary.length -1] = xxxx


2.实现一个需求
(5).plus(10).reduce(2)  5+10-2
Number.prototype.plus=function(num){}
Number.prototype.reduce=function(num){}