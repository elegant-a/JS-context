JS中的两种编程思想:同步,异步
//JS是单线程的->JS是个傻子,脑子一根筋,做着当前的这件事情,没有完成之前,绝对不会做下一件事情
//JS中的两种编程思想:同步,异步
同步->上一件事情没有完成,继续处理上一件事情,只有上一件事情完成了,才会做下一件事情
(JS中大部分都是同步编程)
for(var i =0;i<10000;i++){
if(i == 9999){
 console.log("循环结束了")//->(1)

}
}
console.log("ok")
//->for循环就是同步编程的,只有循环结束后,才会继续执行下面的代码



//2.异步编程->规划要做一件事情,但是不是当前立马去执行这件事情,需要等一定的时间,
这样的话,我们不会等着它执行,而是继续执行下面的操作,只有当下面的事情都处理完成了
, 才会返回头处理之前的事情;如果下面的事情并没有处理完成,不管之前的事情有没有到
时间,都踏实等着
//->JS中异步编程只有四种情况
定时器都是异步编程的,所有的事件绑定都是异步编程的,Ajax读取数据的时候，我们一般都
设置成异步编程,回调函数也是异步编程的

//每一个浏览器对于定时器的等待时间都有一个最小值,如果设置的等待时间小于这个值,
不起作用,还是需要等到最小时间才执行的;尤其是写0也不是立即执行.
var n = 0;
widnow.setTimeout(function(){n++;
console.log(n)->
},1000)

console.log(n)->0


如果遇到了死循环,定时器就卡死了,不执行
//->我们定时器设置的时间,不一定就是最后执行的时间,如果定时器之后还有其他的事情正在
处理中,不管定时器的时间有没有到,都是不会执行的时间
var n = 0;
window.setTimeout(function(){


})


var n = 0;
window.setTimeout(funciton(){
n += 2;
console.log(n)
},100)

window.setTimeout(function(){
n += 5
console.log(n)

},5)
console.log(n)->0
for(var i = 0; i< 100000;i++){


}
cosnole.log(n)
0
0
5先输出5
7再输出7


for(var i = 0;i<oLis.length;i++){
 oLis[i].onclick=function(){
 tabChange(i)

}

只有用户点击时才执行,在点击之前for循环已经完成了
}

怎么解决,作用域,闭包,变量提升
作用域就是栈内存,函数执行才有栈内存

function a(){
var name = "dov";

return function(){

 return name;
}
}

var b=a();
console.log(b())