JS盒子模型
*{
  margin:0
  padding:0;
}
#box{
   margin:100px;
   padding:30px;
   width:200px;
   height:200px;
   border:10px solid green;
   line-height:
}
css盒子模型
margin padding width height border

//1.js盒子模型指的是通过JS中提供的一系列属性
和方法,获取页面中元素的样式和信息值
//#box(有很多自己的私有属性)
 var  box = document.getElementById(("box");
console.log(box)
__proto__指向所属类的原型
//#box(有很多自己的私有属性)->HTMLDivElement.prototype->HTMLElement.prototype
->Element.prototype->Node.prototype->EventTarget.prototype->Object.prototype

//增加class的属性
box.classList.add("test100")
//减少class的属性
box.classList.remove("test1")

//内容的宽度和高度:我们设置的width/height这两个样式就是内容的宽和高

//内容的宽度和高度:我们设置的width/heigth这两个样式就是内容的宽和高;如果没有设置
height值,容器的高度会根据里面内容自己进行适应,这样获取的值就是真实的内容的高;
如果设置了固定的高度了,不管内容是多了还是少了,其实我们内容的高度指的都是设定
的那个值;

//->真实内容的宽度和高度:这个代指的是实际内容的宽高(和我们设置的height没有必然的联系)
例如:我设置高度为200px.如果内容有溢出,那么真实内容的高度是要把溢出内容的高度也要
加进来的


//1.client系列(当前元素的几个私有属性)
//->clientHeight/clientWidth:内容的宽度/高度+左右填充/上下填充(和内容溢出没有关系)
(当前屏幕的宽度和高度)
//->clientLeft:左边框的宽度 clientTop:上边框的高度 (borderWidth)

//2.offset系列
内容的高度+上下填充+上下填充
// ->offsetWidth/offsetHeight:clientWidth/clientHeight+左右/上下边框
(和内容溢出没有任何关系)
//->offsetParent:当前元素的父级参照物
//->offsetLeft/offsetTop:当前元素的外边框距离父级参照物的内边框偏移量

3.scroll系列
//->scrollWidth/scrollHeight:和我们说的clientWidth/clientHeight一模一样(前提是没有溢出)
,如果容器中的内容有溢出,我们获取的结果是如下规则:
//scrollWidth:真实内容的宽度(包含溢出)+左填充
//scrollHeight:真实内容的宽度(包含溢出)+上填充
//获取到的结果都是约等于的值,因为:同一个浏览器,我们是否设置overflow='hidden'对于
最终结果是有影响的;//在不同的浏览器中,我们获取到的结果也是不相同的;
//scrollLeft/scrollTop:滚动条卷去的宽度/高度

console.log(box.scrollHeight)





//2)关于JS盒子模型取值的问题
//->我们通过这13个属性值获取的结果永远不可能出现小数,都是整数;浏览器在获取结果的时候,
还在原来真实结果的基础上进行四舍五入.
box.clientHeight


//3)关于操作浏览器本身的盒子模型信息
document.documentElement.clientWidth(当前屏幕宽度)document.body.clientWidth
document.documentElement.Height(当前浏览器的高度)
//->clientWidth/clientHeight是当前浏览器可视窗口 

//scrollWidth/scrollHeight是当前页面的真实宽度和高度(所有屏加起来的宽度和高度~但是是一个约等于的值)

//->我们不管哪些属性,也不管是什么浏览器,也不管是获取还是设置,想要都兼容的话,需要
写两套

  //document.documentElement.clientWidth | | docuemnt.body.clientWidth;

回到顶部
//document.documentElement.scrollTop = 0;


//编写一个有关于操作浏览器盒子模型的方法
//如果只传递了attr没有传递value,默认的意思是获取样式值
//如果两个参数都传递了,意识是设置某一个样式的
//->不严谨的来说这就是有关于"类的重载":同一个方法,通过传递参数的不同实现了不同的功能

function win(attr,value){
if(typeof value === "undefined"){//->没有传递value值->"获取"
   return docuemnt.documentElement[attr] || document.body[attr]
}
//->"设置"
document.documentElement[attr] = value;
document.body[attr]=value;
}

win("clientHeight")
677
win("scrollTop",0)
