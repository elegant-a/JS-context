box.clientHeight(内容的高度+上下的填充)
box.offsetHeight(内容的高度+上下的填充+边框)
box.style.height行内样式

//获取元素的某一个具体的样式属性值 
//1.元素.style.属性名
//需要我们把元素的样式都写在行高内样式上才可以(写在样式表中是不管用的)
console.log(box.style.height)
//在真实项目中,这种方式不常用,因为我不能为了获取值而把所有的样式读写在行内(无法实现
CSS和HTML的分离)

//2.使用window.getComputedStyle这个方法获取所有经过浏览器计算过的样式
//->所有经过浏览器计算过的样式:只要当前的元素标签可以在页面中呈现出来,那么它的所有
的样式都是经过浏览器计算过的(渲染过的)->哪怕有些样式你没有写,我们也可以获取到

console.log(window.getComputedStyle);//function
//第一个参数是当前要操作的元素对象,null当前要操作元素的伪类,我们一般不用伪类
用null
//->获取的结果是CSSstyleDeclartin这个类的一个实例
//获取某一个具体的样式的值
console.log(window.getComputedStyle(box,null)[height])

//3.方法虽然好用,但是在IE6~8中是不兼容的
因为window下没有getComputedStyle这个属性

//在IE6~8下我们可以使用currentStyle来获取所有经过浏览器计算的样式
console.log(box.currentStyle.height)

//1.处理兼容,用try/catch捕获异常处理兼容
//->前提:必须保证try中的代码在不兼容浏览器中执行的时候报错,这样的话我们才可以
用catch捕获到异常信息,进行其他处理
不管当前是什么鬼浏览器,都需要把当前代码执行一便,IE7,window.getComputedStyle
本身是不兼容的,但是我也要把它先执行一遍,报错了,在把curEle.currentStyle执行一遍
(消耗性能)
//->getCss：获取当前元素所有经过浏览器计算过的样式中的[attr]对应的值 
//curEle:[object] 当前要操作的元素对象
//attr:[string]我们要获取的演示属性名称
//function getCss(curEle,attr){
var val = null;
try{
val = window.getComputedStyle(curEle,null)[attr]
}
catch(e){
  val = curEle.currentStyle[attr];
}
return val
}
console.log(getCss(box,"height"))
//2.判断当前浏览器中是否存在这个属性或者方法,存在就兼容,不存在就不兼容

function getCss(curEle,attr){
var val = null;
// window.getComputedStyle
//兼容返回的是一个函数,转换成布尔是true,不兼容返回的是undefined转换为布尔为false
//还可以检测数据类型typeof
if("getComputedStyle" in window){
//如果返回的是true,说明window下有getComputed这属性,代表兼容
val = window.getComputedStyle(curEle,null)[attr]
}else{/代表不兼容
  val = curEle.currentStyle[attr]
}
return val;
}

//3.通过检测浏览器版本和类型来处理兼容
widnow.navigator.userAgent
//谷歌Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 
(KHTML, like Gecko) Chrome/92.0.4515.131 Safari/537.36

//ie ua=mozilla/4.0 (compatible; msie 8.0; windows nt 5.2; trident/4.0; qqpinyin 730; .net clr 1.1.4322)

function getCss(curEle,attr){
var val = null;
if(/MSIE(6|7|8)/.test(navigator.userAgent)){

  val = cueEle.currentStyle[attr];
}else{
   val = widnow.getComputedStyle(curEle,null)[attr];
}

retrn val
}

//扩展题,使用正则检测浏览器的版本
var reg = (/MSIE(6|7|8)/);//检测ie678
reg.test(navigator.userAgent)

console.log(getCss(box,"fontFamily"))在谷歌和ie下是不一样的

console.log(getCss(box,"border"))谷歌下有,ie下没有

//标准浏览器和IE浏览器获取的结果还是不一样的->对于部分样式属性,不同浏览器获取的结果
不一样,主要是由于getComputedStyle和crrentStyle不一样造成的


//写css的时候,第一步就是默认化初始样式,避免浏览器之间的差异->不仅如此,而且写的
默认样式对于JS以后获取到的统一结果也是有帮助的


//第一次升级:把获取到的样式值单位去掉
//只有符合"数字+单位 或者数字"才可以使用parseFloat
function getCss(curEle,attr){
var val = null,reg = null;
//下面那样写的话,reg相当于全局的,没有var
var val = reg = null;
if("getComputedStyle in window"){
  val = window.getComputedStyle(curEle,null)[null];
}else{ IE678
  val = curEle.currentStyle["filter"];//I->"alpha(opacity=10)"
把获取到的结果进行剖析,获取里面的数字，让数字除以100才和标准的浏览器
保持一致

  reg = /^alpha\(opacity=(\d+(?:\.\d+)?)\)$/i;
  val = reg.test(val) ? reg.exec(val)[1] / 100:1
}
?:只匹配,不捕获
reg = /^(-?\d+(\.\d+)?)(px|pt|rem|em)?$/
return reg.test(val) ? parseFloat(val) : val;
}
//第二次升级:有些样式属性在不同的浏览器中是不兼容的
如opacity设置当前元素的透明度
filter:alpha(opacity=10);不兼容的话使用滤镜来处理


console.log(getCss(box,"opacity"))



getComputedStyle和currentStyle如何处理兼容,js中检测数据类型的几种常用的方式
getCss获取元素的具体样式信息,以及两个属性之间细节的差别


       function getCss(curEle,attr){
           var val = null,reg = null;
           if("getComputedStyle" in window){
             val = window.getComputedStyle(curEle,null)[attr];
           }else{
               if(attr === "opacity"){
                   val = curEle.currentStyle["filter"];
                   reg = /^alpha\(opacity=(\d+(?:\.\d+)?)\)$/i;
                   val = reg.test(val) ? reg.exec(val)[1] / 100 : 1;
               }else{
                   val = curEle.currentStyle[attr];
               }
           }
           reg = /^(-?\d+(\.\d+)?)(px|pt|rem|em)$/i;
           return reg.test(val) ? parseFloat(val) : val;
       }



