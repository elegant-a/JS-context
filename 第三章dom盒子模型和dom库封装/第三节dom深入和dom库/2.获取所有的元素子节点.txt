获取某一个容器中的元素子节点,children
<div id="div1">
<div></div>
<div></div>
<div>
  <p></p>
  <p></p>
</div>
<p></p>
<p></p>
<p></p>
</div>


<script type="text/javascript">
 var oDiv = document.getElementById("div1");
 console.log(oDiv.children)
  
 children不兼容ie678,childrenNodes兼容ie678
 首先获取所有的子节点(childNodes),在所有的子节点中,
 把元素节点过滤出来(nodeType === 1)
 function children(curEle,tagName){
 if(/MSIE6|7|8/i.test(navigator.userAgent)){var nodeList = curEle.childNodes;
 var ary = [];
 //->IE6~8下不能使用内置的children属性,我们自己写代码实现
 var nodeList = curEle.childNodes;
 for(var i = 0,len=nodeList.length;i < len;i++){
 var curNode = nodeList[i];
 if(curNode.nodeType === 1){
//把这个元素放在容器的末尾
  ary[ary.length] = curNode;
}
 
}
}else {
  //在标准浏览器中,我们直接使用children即可,但是这样获取的是一个元素集合(类数组),
     为了和IE6~8下保持一致,我们借用数组原型上的slice,实现把类数组转换为数组
  现在已经不是ie678了,类数组要转换成数组
  ary = Array.prototype.slice.call(curEle.children);
}
[div,div,div,p,p,p] len=6 i=0 i<6 i++
 //->二次筛选
 if(typeof tagName === "string"){
//len = ary.length以后数组就不变了
//ary.length每次都会读取,避免数组塌陷
  for (let k = 0;len=ary.length;k<len;k++){
  var curEleNode = ary[k];
  if(curEleNode.nodeName.toLowerCase() !== tagName.toLowerCase()){
     //->不是我想要的标签
     ary.splice(k,1);//使用siplice会改变数组的长度
     注意改变k的长度
     k--;
     
}
}
}
  
 return ary;
}
console.log(children(oDiv,"p").length);
</script>