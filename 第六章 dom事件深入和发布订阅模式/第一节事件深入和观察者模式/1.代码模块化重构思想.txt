代码模块功能化功能重构思想

写出来效果并非是程序员的终极目标,即便是能很熟练的写出来这些效果来,也没什么了不起的,
最多也就是个三流的程序员
   那问题出在哪呢?就是每加一个效果,我就要去修改原代码,把本该独立的功能,
都搅合在一起了,这就违背了编程低耦合高内聚的原则
   那么我们应该怎么办呢?就是:拖拽功能是完全独立的,它应该是一个基本的,成熟完善的独立
   模块.而像fly方法和drop方法,也应该是完全独立的模块,而不能把这三个模块写在一起。
   当然也不能为了给拖拽加另外的效果而去破坏原来的源码.
   既然要让这三个效果在一起发生,又不能把代码写在一起,这怎么办呢?上设计模式.
   一说设计模式又高大上了


//事件模式
这样的记录,也可以叫订阅
发布-发通知

//耦合度:
f unction fn1(){
  eles.item(0)
}


//想操作谁把谁传递进来就好
function fn1(ele){
   ele
}

尽量把代码分离剥离

想让三个函数既是独立的,还要能在必要的时候联系在一起,那就要为这三个函数之间搭一个桥梁
,为这个函数和其他函之间留一个通道,如果用编程术语来解释,就是为每一个功能模块留好
接口,那么这个接口叫什么鬼,在JS中有一个说法叫事件,现在就颠覆对事件的认知；

每一个function之间应该是零耦合的

刘德华的行为:看成a
把所有订阅刘德华的行为称之为b
B订阅了a
B是a的观察者
addEventListener//增加一个观察者(监听者)

//订阅发布模式---->观察者模式基本相同
for(var i=0;i<结婚事件宾朋清单.length;i++){
   生娃事件宾朋清单[i]();//加括号是指让这个行为发生
}


