//正则分组
//1.改变优先级
//2.分组引用
//\2代表和第二个分组出现一模一样的内容;
  \1和第一个分钟出现一模一样的内容;
//一模一样:和对应的分组中的内容的值都要一样
var reg=/^(\w)\1(\w)\2$/;
console.log(reg.test("zfzf"));->true
console.log(reg.test("z0f_"));->false

//3.分组捕获 ->正则在捕获的时候,不仅把大正则捕获到,而且还可以把小分组匹配到
var reg = /^(\d{2})({\d{4})({\d{4})({\d{2})({\d{2})({?:\d{2})(/d)(\d|X)$/
var str = "130821199907157117";
console.log(reg.exec(str))


//(?:) 在分组中?:的意思是只匹配,不捕获
//ary[0] -> 大正则匹配的内容
//ary[1] -> 第一个分组捕获的内容


console.log(str.match(reg)),index:0,input是输入的原内容
//->和exec获取的内容是一样的

//我们用exec执行三次,每一次不仅仅把大正则匹配到的获取到,而且还可以获取第一个分组匹配的
内容
console.log(reg.exec(str));["zhufeng1234","1234"...]
console.log(reg.exec(str));["zhufeng1234","3456"...]
console.log(reg.exec(str));["zhufeng1234","5678"...]

console.log(str.match(reg));->["zhufeng1234","zhufeng3456"]
//而match只能捕获大正则匹配的内容

