var reg = /\d/;->包含了一个0-9之间的数字

reg = /^\d$/;开头时0-9之间的数字,结尾也是0-9之间的数字
//所以只能是0-9之间的数字
^$只能是
console.log(reg.test("012"))中间包含三个数字

//元字符:
//每一个正则表达式都是由元字符和修饰符组成的
//[元字符] ->在两个//之间具有意义的一些字符
//1.具有特殊意义的元字符
//  \:转义字符,转义后面字符所代表的含义
//   ^:以某一个元字符开始
//  $:以某一个元字符结尾
//  .:除了\n以外的任意字符
//  \n:匹配一个换行符
//  ():分组 分组作用一:改变x|y的默认的优先级
//  x|y ：x或者y中的一个
//  [xyz]:xyz中的任何一个
//  [^xyz]:除了三个以外的任何一个字符
//  [a-z]；包含a-z之间的任何一个字符
//  [^a-z]:除了a-z之间的任何一个字符
//  \d:一个0-9之间的数字   \D:除了0-9之间的数字以外的任何字符
//  \b:匹配一个边界符
//  \w:数字,字母,下划线中的任意一个字符  [(0-9)(a-z)(A-Z)(_)]
//  \s"匹配一个空白字符 空壳,一个制表符,按一个tab键四个空格 换页符...
var reg=/^\d+zhufeng\d+$///->前面包含1-多个数字,后面包含1-多个数字
//var reg = /^(\d+)zhufeng(\d+)$/;



reg = /^0\.2$/转义字符中间只能包含.
var reg = /^0.2&/->以0开头,以2结尾,中间可以是除了\n以外的任意字符

//2. 代表出现次数的量词元字符
// *:出现零到多次
// +:出现一到多次
// ?:出现零次或者一次
//{n}:出现n次
//{n,}:出现n到多次
//{n,m}:出现n到m次 

var reg = /^\d+$/;
//console.log(reg.test("2015"));//true
//一个简单验证手机号的正则:11位数字,第一位是1
var reg = /^1{10}\d$/;
简单的手机号验证规则

//[]
//1.在中括号中出现的所有字符都是代表本身的意思,没有特殊含义

元字符应用
1.有效数字的正则 正数,负数,零,小数
//1）可以出现小数点,也可以不出现 ,但是一旦出现,后面必须跟着一位或者多位数字
//2) 最开始可以有+/-也可以没有
//3) 整数部分,一位数可以是0-9之间的一个,多位数不能以0开头

var reg = /^[+-]?(\d|([1-9]\d+))(\.\d+)?$/

var reg = /^$/

//12.3
//12
//-12
//+12
//0.2




