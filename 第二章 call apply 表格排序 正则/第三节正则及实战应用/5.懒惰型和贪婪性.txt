var reg = /\d+/;
var str = "zhfeng2015"
var str = "zhufeng2015peixn2016";
正则捕获
//每一次捕获的时候都是先进行默认的匹配,如果没有匹配成功的,
捕获的结果是null;只有匹配的内容才是我们才能捕获到的
捕获的内容格式
//1)捕获的内容是一个数组，数组中的第一项是当前大正则捕获的内容
// index:捕获内容在字符串中开始的索引位置
// input:捕获的原始字符串
var res = reg.exec(str)
console.log(res)

//2.正则捕获的特点
1)懒惰型
每一次执行exec只捕获第一个匹配的内容,在不进行任何处理的情况下,在执行多次捕获,
捕获的还是第一个匹配的内容
//lastIndex:是正则每一次捕获在字符串中开始查找的位置,默认的值是0
//说明我们第二次捕获的时候,也是要从索引0处开始查找


2)如何解决懒惰性?在正则的末尾加一个修饰符"g"
//修饰符: g,i,m
//global(g):全局匹配
//ignoreCase(i):忽略大小写
//multiline(m):多行匹配

var reg = /\d+/g;
var str ="aa2015ds2016"
console.log(reg.lastIndex)->0
console.log(reg.exex(str))
console.log(reg.lastIndex)->11


lastIndex表示匹配成功的时候,匹配内容最后一个字符所在原字符串的位置+1,也就是匹配
内容的下一个字符串idnex
//原理:加了全局修饰符g,每一次捕获结束后,我们的lastIndex的值都变为了最新的值,下一次
捕获从最新的位置开始查找,这样就可以把所有需要捕获的内容都获取到了

3)自己编写程序获取正则捕获的所有内容(一定不要忘记加g)
var reg = /\d+/g;
var str = "zhufeng2015peixun2016yangfan2017"
var ary = [];
var res = reg.exec(str);
while(res) {
//将捕获的内容放到数组当中
 ary.push(res[0]);
//如果res变量存在,就再进行捕获
 res = reg.exec(str);
};
console.log(ary)

//4) 贪婪性: 正则的每一次捕获都是按照匹配的最长的结果捕获的,
例如:2符合正则 2015也符合正则,我们默认捕获的是2015
var reg = /\d+/g;->出现一到多个0-9之间的数字
var str = "zhufeng2015peixun2016yangfan2017" 
console.log(reg.exec(str));//["2015"....]

不加g 就只找第一个,每次只捕获最长的

5)如何解决正则的贪婪性->在量词后面添加一个?即可

?在正则中有很多作用:
//放在一个普通的元字符后面 代表出现0-1次 /\d?/->数字可能出现也可能不出现
//放在一个量词元字符后面是取消捕获时的贪婪性

var reg = /\d+?/g;
var str = "zhufeng2015peixun2016yangfan2017"
var ary = [], res = reg.exec(str);
while(res){
ary.push(res[0]);
res = reg.exec(str);
}
console.log(ary);
var reg = /\d+?/g;
var str = "zhufeng2015peixun2016yangfan2017"
//3.字符串中的match方法->把所以和正则匹配的字符都获取 
到

var ary = str.match(reg);
console.log(ary);

//虽然在当前的情况下match比我们的exec更简便一些，但是match中存在一些自己处理不了的问题;
在分组捕获的情况下,match只能捕获到大正则匹配的内容,而对于小正则是无法捕获的




