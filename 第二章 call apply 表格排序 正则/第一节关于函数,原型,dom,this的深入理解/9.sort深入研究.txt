//一维数组,数组进来就是值
var ary = [12,23,14,34,23,1,14,16,26,2];
//二维数组
var ary=[
         {name:"xxx",age:78},
         {name:"xxx",age:13}
]
//三维数组,对象中还有对象或者数组
ary.sort();//->这样只能处理10以内的数字排序
>0 ,a和b交换位置,0< a和b的值不动
ary.sort(function(a,b){
//a->每一次执行匿名函数的时候,找到的数组中的当前项
//b->每一项的后一项
  return a - b;//升序,小的在头,如果a>b a和b交换位置
  return b - a;//降序 如果b>a,返回>,a和b交换位置

回调函数,把函数当做值传递过来,
我return的是一个>0 || <=0的数,大于0让a和b交换一下位置,小于等于0原来的位置不动
})
ary.sort(function(a,b){
 return 1;//不管a和b谁大,每一次都返回一个恒大于零的数,也就是每一次a和b都要交换位置,
最后的结果就是原有数组倒过来排序了 ==>reverse
})
//->回调函数,把一个函数当做一个值,传递给另外一个函数B,在B执行的过程中,我们随时根据需求
让我们传递的函数执行
function fn (callback){
   callback();
}
fn(function(){})

function A(){

}
function B(fn){
fn()
fn()
fn()
}
B(A);


}
var ary=[
         {name:"xxx",age:78},
         {name:"xxx",age:13},
         {name:"xxx",age:107},
         {name:"xxx",age:256},
]
//给二维数组排序,按照年龄由小到大排序
ary.sort(function(a,b){
return parseFloat(a.age)-parseFloat(b.age);

})


按照姓名排序
//字符串常用方法
"啊啊啊".localeCompare("啛啛喳喳")
首先转换成拼音
"guojunhe".localeCompare("jiangzhang")
按照26个字母表进行比较
前面字母先于后面返回-1,后面先于前面,返回1


ary.sort(function(a,b){
return a.name.localCompare(b.name)

})