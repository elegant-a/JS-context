//我们在JS中使用try,catch进行浏览器的异常信息捕获


try{

}catch(e){//形参必须要写,我们一般取名为e

}
//1.我们try中的语句报错,如果用try/catch捕获了异常信息,不影响下面的代码继续执行:
如果try中的代码执行出错了,会默认的去执行catch中的代码;e.message会收集到报错原因

try{
 //<js code>
}
catch(e){
 /如果代码报错,执行catch中的代码
 //手动抛出一条错误信息,终止代码执行
//创建Error这个类的一个实例
 throw new Error("当前网络繁忙,请稍后再试")
 new ReferenceError->引用错误
 new TypeError ->类型错误
 new RangeError ->范围错误
}finally{
  //一般不用:不管try中的代码是否报错,都要执行finall中的代码
}

//有时候即想捕获到错误的信息,又不想让下面的代码继续执行

//listToArray方法,将类数组转换为数组
var utils = {
  listToArray:function(likeAry){
  var ary = [];
  try{//通过改变数组原型上slice方法,将类数组变为数组,克隆一份一模一样的
   ary = Array.prototype.slice.call(likeAry);
} catch(e){
    for(var i = 0;i<likeAry.length;i++){
         ary[ary.length] = likeAry[i];
}
}
 return ary
}
}