function Fn(){
   var num = 500;
   this.x=100; 
}

Fn.prototype.getX = function (){
console.log(this.x);
};
Fn.aaa = 1000;
var f = new Fn();
f.num ->undefined
f.aaa ->undefined

var res=Fn();//->Fn中的this是window
res=undefined

oDiv是对象数据类型,就能用hasOwnProperty和toString方法
//函数本身也会有一些自己的属性:
//->length:0 形参的个数
//->name:"Fn"函数名
//->prototype 类的原型,在原型上定义的方法都是
当前Fn这个类实例的公有方法
//->__proto__  把函数当做一个普通对象,指向Function类的原型


//函数在整个JS中是最复杂也是最重要的知识
//1.一个函数存在了多面性:
//->它本身就是一个普通函数,执行的时候,形成私有的作用域
(闭包),形参赋值,预解释,代码执行,执行完成后栈内存销毁/不销毁
//"类":它有自己的实例,也有一个叫做prototype属性是自己的原型,它的实例都可以指向自己的
原型
//->"普通对象":和var obj={}中的obj一样,就是一个普通的对象,它作为对象可以有一些自己的
私有属性,也可以通过__proto__找到Function.prototype

//这三者之间是没有任何必然关系的

Function.prototype
->Empty
是函数数据类型的值,但是相关操作和之前是一模一样的