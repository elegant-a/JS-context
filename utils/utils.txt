//使用惰性思想(JS高阶编程技巧之一)来封装我常用的方法库:我们以已经把兼容处理好了
// ,把最后的结果放在flag变量中,以后在每一个方法中,只要是IE6~8不兼容的,我们不需要重新
// 检测,只需要使用flag的值即可
var utils = (function () {
    var flag = "getComputedStyle" in window;

    function listToArray(likeAry) {
        if (flag) {
            return Array.prototype.slice.call(likeAry);
        }
        var ary = [];
        for (var i = 0; i < likeAry.length; i++) {
            ary[ary.length] = likeAry[i];
        }
        return ary
    }

    //->formatJSON:把JSON格式的字符串转换为JSON格式
    function formatJSON(str) {
        var val = null
        try {
            val = JSON.parse(str)
        } catch {
            eval("(" + str + ")")
        }

        return val
    }

    function getCss(curEle, attr) {
        var val = null, reg = null;
        if (flag) {
            val = window.getComputedStyle(curEle, null)[attr];
        } else {
            if (attr === "opacity") {
                val = curEle.currentStyle["filter"];
                reg = /^alpha\(opacity=(\d+(?:\.\d+)?)\)$/i;
                val = reg.test(val) ? reg.exec(val)[1] / 100 : 1;
            } else {
                val = curEle.currentStyle[attr];
            }
        }
        reg = /^(-?\d+(\.\d+)?)(px|pt|rem|em)$/i;
        return reg.test(val) ? parseFloat(val) : val;
    }

    function offset(curEle) {
        var totalLeft = null, totalTop = null, par = curEle.offsetParent
        totalLeft += curEle.offsetLeft;
        totalTop += curEle.offsetTop;
        while (par) {
            if (navigator.userAgent.indexOf("MSIE 8.0") === -1) {
                totalLeft += par.clientLeft;
                totalTop += par.clientTop;
            }
            totalLeft += par.offsetLeft;
            totalTop += par.offsetTop;
            par = par.offsetParent;
        }
        return {left: totalLeft, top: totalTop}
    }

    //获取或设置浏览器有关的模型信息
    function win(attr, value) {
        if (typeof value === "undefined") {//->没有传递value值->"获取"
            return document.documentElement[attr] || document.body[attr]
        }
        //->"设置"
        document.documentElement[attr] = value;
        document.body[attr] = value;
    }

    //children:获取curEle下所有的元素子节点(兼容所有的浏览器),如果传递了tagName,
    function children(curEle, tagName) {
        var ary = [];
        if (!flag) {
            var nodeList = curEle.childNodes;
            for (var i = 0, len = nodeList.length; i < len; i++) {
                var curNode = nodeList[i];
                curNode.nodeType === 1 ? ary[ary.length] = curNode : null
            }
            nodeList = null;
        } else {
            ary = this.listToArray(curEle.children);
        }
        if (typeof tagName === "string") {
            for (var k = 0; k < ary.length; k++) {
                var curEleNode = ary[k];
                if (curEleNode.tagName.toLowerCase !== tagName.toLowerCase) {
                    ary.splice(k, 1);
                    k--
                }

            }

        }
        return ary
    }

    //prev:获取上一个哥哥元素节点s
    function prev(curEle) {
        if (flag) {
            return curEle.previousElementSibling;
        }
        var pre = curEle.previousSibling
        while (pre && pre.nodeType !== 1) {
            pre = pre.previousSibling;
        }
        return pre;
    }

//获取下一个弟弟元素节点
    function next(curEle) {
        if (flag) {
            return curEle.nextElementSibling;
        }
        var nex = curEle.nextSibling
        while (nex && nex.nodeType !== 1) {

            nex = nex.nex
        }
        return nex
    }

//获取所有的哥哥元素节点
    function prevAll(curEle) {
        var ary = [];
        var pre = this.prev(curEle);
        while (pre) {
            ary.unshift(pre);
            pre = this.prev(pre)
        }
        return ary;
    }

//nextAll获取所有的弟弟元素节点
    function nextAll(curEle) {
        var ary = [];
        var nex = this.next(curEle);
        while (nex) {
            ary.push(nex);
            pre = this.prev(nex)
        }
        return ary;
    }

//sibling:获取相邻的两个元素节点
    function sibling(curEle) {
        var pre = this.prev(curEle);
        var nex = this.next(curEle);
        var ary = [];
        pre ? ary.push(pre) : null;
        nex ? ary.push(nex) : null;
        return ary
    }

//siblings:获取所有的兄弟元素节点
    function siblings(curEle) {
        return this.prevAll(curEle).concat(this.nextAll);
    }

//获取当前元素索引
    function index(curEle) {

        return this.prevAll(cueEle).length;
    }

//firstChild:获取第一个元素子节点
    function firstChild(curEle) {
        var chs = this.children(curEle);
        return chs.length > 0 ? chs[0] : null
    }

//lastChild获取最后一个元素子节点
    function lastChild(curEle) {
        var chs = this.children(curEle);
        return chs.length > 0 ? chs[chs.length - 1] : null;
    }

//append:向指定容器的末尾追加元素
    function append(newEle, container) {
        container.appendChild(newEle);
    }

//prepend:向指定容器的开头追加元素 ->把新的元素添加到容器中第一个子元素节点的前面
//如果一个元素子节点都没有,就放在末尾
    function prepend(newEle, container) {
        var fir = this.firstChild(container);
        if (fir) {
            container.insertBefore(newEle, fir);
            return;
        }
        container.appendChild(newEle)
    }

//insertBefore:追加到指定元素的前面
    function insertBefore(newEle, oldEle) {
        oldEle.parentNode.insertBefore(newEle, oldEle);
    }

//insertAfter:向容器中指定元素的末尾追加,相当于追加到oldEle弟弟元素
//     的前面, 如果弟弟不存在, 也就是当前元素已经是最后一个, 我们放到最末尾即可

    function insertAfter(newEle, oldEle) {
        var nex = this.next(oldEle);
        if (nex) {
            oldEle.parentNode.insertBefore(newEle, nex);
            return;
        }
        oldEle.parentNode.appendChild(newEle)
    }

//验证当前元素中是否包含className这个样式名
    function hasClass(curEle, className) {
        var reg = newRegExp("(^| +)" + className + "( +|$)")
        return reg.test(curEle.className);

    }

//addClass:给元素增加样式类名
    function addClass(curEle, className) {
//->为了防止className传递进来的值包含多个样式类名,我们把传递进来的字符串
        按照一到多个空格拆分成数组中的每一项
        var ary = className.split(/ +/g);
//循环数组,一项项的进行验证增加即可
        for (var i = 0, len = ary.length; i < len; i++) {
            var curName = ary[i]
            if (!this.hasClass(curEle, curName)) {
                curEle.className += "" + curName;
            }
        }
    }


//->removeClass:给元素移除样式类名
    function removeClass(curEle, className) {
        var ary = className.split(/ +/g);
        for (var i = 0, len = ary.length; i < len; i++) {
            var curName = ary[i]
            if (this.hasClass(curEle, curName)) {
                var reg = new RegExp("(^| +)" + curName + "( +|$)", "g");
                curEle.className = curEle.className.replace(reg, " ");
            }
        }
    }

    function getElementsByClass(strName, context) {
        context = context || document;
        if (flag) {
            return this.listToArray(context.getElementsByClassName(strNamm));


        } //ie6~8
        var ary = []
        var strClassAry = strClass.replace(/(^ +| +$)/g, "").split(/ +/g);
        var nodeList = context.getElementsBtTagName("*")
        for (var i = 0, len = nodeList.length; i < len; i++) {
            var curNode = nodeList[i];
            var isOk = true;
            for (var k = 0; k < strClassAry.length; k++) {
                var reg = new RegExp("(^| +)" + strClassAry[k] + "( +|$)");
                if (!reg.test(curNode.className)) {
                    isOk = false;
                    break;

                }
            }
            if (isOk) {
                ary[ary.length] = curNode;
            }
        }
        return ary
    }

    return {
        win: win,
        offset: offset,
        listToArray: listToArray,
        formatJSON: formatJSON,
        getCss: getCss,
        children: children,
        prev: prev,
        next: next,
        prevAll: prevAll,
        nextAll: nextAll,
        sibling, sibling,
        siblings: siblings,
        index: index,
        firstChild: firstChild,
        lastChild: lastChild,
        append: append,
        prepend: prepend,
        insertBefore: insertBefore,
        insertAfter: insertAfter,
        hasClass: hasClass,
        addClass: addClass,
        removeClass: removeClass,
        getElementsByClass: getElementsByClass


    }

})();