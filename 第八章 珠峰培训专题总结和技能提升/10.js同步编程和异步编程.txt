JS中的异步编程
//JS中两种编程思想:同步,异步
//JS是单线程的->JS就是个傻子,做着当前这件事件,没有完成之前,绝对不会做下一件事情
//JS中两种编程思想:同步,异步
//同步->上一件事情没有完成,继续处理上一件事情,只有上一件事情完成了,才会做下一件事情(JS中大部分都是同步编程的)
//for循环就是同步编程

//2.异步->规划要做一件事情,但是不是当前立马去执行这件事情,需要等一定的时间,这样的话,我们不会等着它
执行,而是继续执行下面的操作,"只有下面的事情都处理完了",才会返回头处理之前的事情;如果下面的
事情并没有处理完成,不管之前的事情有没有时间,都要踏踏实实的等着.

   //->在JS中异步编程只有四种情况:定时器都是异步编程的,所有的事件绑定都是异步编程的,Ajax读取
数据的时候,我们一般都设置为异步编程,回调函数也是异步编程的
//每一个浏览器对于定时器的等待时间都有一个最小的值,谷歌:5-6ms
while(1){//->死循环
n++;
}

console.log(n);//->不执行的
window.setTimeoout(function(){
 n += 5;
 console.log(n)
})

谁先到就执行谁
任务队列

所有的事件绑定都是异步编程的








