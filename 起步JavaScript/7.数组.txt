JS中的数据类型包括,基本数据类型和引用数据类型
//object->{},[],/^$/,时间
//每一个对象都是由属性名和属性值组成的
console.dir()可以显示一个对象的属性和方法
var ary=[12,23,24]

//数组也是对象,我们看到的是它的属性值,属性名是数字0~3
//->0存储的第一项的值 1存储的第二项的值
我们把代表第几项的这个数字的属性名叫做数组的"索引"
// ->length:4 数组的长度

//数组中有一个叫做length的属性,这个属性是浏览器天生就给数组增加的
(不是我们自己编写的属性),这个属性属于当前数组"不可枚举属性"

for in循环是用来遍历一个对象中属性名和属性值的,但是对于当前对象
不可枚举的属性我们通过它是遍历不到的;例如:我们无法遍历到
ary.length这个属性

数组中常用的方法,我们需要按照四个维度去探讨
1)方法的作用
2)需要传哪些参数
3)是否有返回值,返回值是什么
4)通过此方法是否对原来的数组产生了改变

1.关于数组的增加,修改,删除
var ary = [12,23,34,45];

//->push:向数组的末尾增加新的内容
//->参数:想向末尾增加哪些内容就传递谁
//->返回:新增加后数组的长度
//->原来的数组已经发生了改变

var res = ary.push(100);
console.log(res,ary);
扩展:不使用push,也想向数组的末尾增加内容
ary[ary.length] = 10;

//2)pop:删除数组最后一项的内容
//->参数:没有
//->返回:被删除的那一项内容
//->原有的数组也发生改变
//    var res = ary.pop();
//    console.log(res,ary);

//扩展:不用pop想删除最后一项的内容
ary.length--
3)shift:删除数组中的第:一项

var res = ary.shift()
console.log(res,ary)

4)unshift向数组开头增加一项
var res = ary.unshift(100);
console.log(res,ary);
5)splice:它既能实现删除,也能实现增加,还能实现修改
ary.splice(n,m) 从索引n开始,删除m个元素,把删除的内容以一个新数组的方式返回,
原来的数组改变
//ary.splice(n)从索引n开始,删除到数组的末尾
//ary.splice(0)把原来的数组中每一项都删除掉(清空数组每一项),
把之前的每一项的值以一个新的数组返回(把之前的数组克隆了一模一样的,这样的克隆会修改原来的数组)
ary.splice()数组中一项都没有删除,返回的是一个空数组

var res = ary.splice();
console.log(res,ary)
//splice(n,m,x) 从索引n开始,删除m个,用x替换删除的部分,把删除的内容
以一个新的数组返回,原来的数组改变
ary.splice(n,0,x)从索引n开始,一个都不删除(返回结果是一个空数组)，!把x增加到索引n的前面

至此,删除,修改,增加,这三大功能就完成了


//2.关于数组的截取和拼接
1)slice:实现数组的截取
//->slice(n,m)从索引n开始,找到索引m处(不包含m),
将找到的部分以一个新的数组返回,原来的数组不变
var = [12,23,34,45,56,67,78]
var newAry = ary.slice(3,6)
console.log(newAry)

//->slice(n) 从索引n开始一直找到数组的末尾
//->slice(0) slice() 把原来的数组克隆一份一模一样的新数组返回

2)concat:把两个数组拼接到一起,原来的数组不变,返回一个新数组
var ary = [12,23,34,45];
var ary2 = [56,67,78,89,90];
var newAry = ary.concat(ary2),ary在后面
//->ary1.concat() 把ary1克隆一份一模一样的数组


3.把数组转换为字符串
1) toString:把数组转换为字符串,原来的数组不变
// var ary = [1,2,3,4,5]
// var res = ary.toString();
//console.log(res);//->"1,2,3,4,5"
2)join:按照每一个分隔符,把数组中的每一项拼接成一个字符串
var ary = [12,23,34,45];
var res = ary.join("+");
console.log(res);

//扩展:eval->JS中把字符串变为JS表达式执行的一个方法
console.log(eval("12+23+34+45"))

//把数组中的每一项进行相加求和
var ary = [12,23,34,45];()
console.log(eval(ary.join("+")))

4.数组的排序和排列
1)reverse:把数组倒过来排列,原来的数组改变
var art = [12,34,23,54,34,25,26,14];
var res = ary.reverse();
console.log(res,ary);

2)sort:给数组进行排序
ary.sort();默认处理10以内的数组进行排序,因为他是按照
UNICODE编码的值进行排序的
ary.sort(function (a,b){return a - b});由小到大排序
ary.sort(function(a,b){ return b - a})由大到小排序

5.只有在标准浏览器中兼容的方法,在IE6~8下不兼容的
1)indexOf / lastIndexOf (字符串中也有这两个方法,但是字符串的这两个方法
兼容所有的浏览器,而数组的这两个方法是不兼容的)
 //-当前内容在数组中第一次/最后一次出现位置的索引,如果数组中没有这一项,
返回的结果是-1，如果有这一项,索引是几就返回几,原来的数组不变

//这样的话,我们就可以验证当前的内容在数组中是否存在了
ary.indexOf("朱峰")
if(ary.indexOf("朱峰") > -1){
//说明 "珠峰"在数组中存在
} else{
 //说明"珠峰在数组中不存在"
}

2)forEach / map 都是用来遍历数组中的每一项的,接收一个函数参数
var ary = [12,34,230,54.34]
用来替换forEach的写法,
数组中有几项，我们的函数就执行几次
//函数中的形参:item->当前遍历的数组中这一项的值  index ->当前这一项的索引
ary.forEach(function(item,index){

})
原来的数组不变

//map和forEach的语法是一样的,但是比forEach多了一个把原来内容进行替换的功能
//接收一个函数作为参
//返回的新数组每一项都是乘了10的
var newAry = arr.map(function(item,index){
return item * 10;
});

console.log(ary)