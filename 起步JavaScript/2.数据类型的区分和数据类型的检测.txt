var num1 = 12;
var num2 = num1;//把num1变量代表的值给了num2变量

//发现:基本数据类型没有跟着改变,引用数据类型跟着改变了

//基本数据类型和引用数据类型的区别

//基本数据类型是把值直接给变量，接下来在操作的过程中,直接拿值进行操作的,
可能两个变量存储一样的值,但是你的是你的,我的是我的,之间没有关系，其中一个改变\
另外一个没有任何影响
  //引用数据类型:
     1.定义一个变量
     2.开辟一个新的空间,然后把属性名和属性值保存在这个空间中,并且有一个空间地址
     3.把空间的地址给了这个变量,变量并没有存储这个数值,而是存储的是对这个空间的引用
     4.接下来我们把这个地址，又告诉了另外一个变量,另外一个变量存储的也是这个地址,
        此时两个变量操作的是同一个空间
     5.其中一个改变了空间的内容,另一个也跟着改变了

总的来说基本数据类型和引用数据类型,一个操作的数据的值,一个操作的是空间的引用

//js中检测数据类型的方式
//typeof运算符
//instanceof运算符
//constructor
//Object.prototype.toString.call()

console.log(typeof "zhufeng")//"string"

"number","string","boolean","undefined","object","function"
typeof "null"的结果是object

typeof局限性,不能具体的检查object 下细分的类型,检查这些返回的都是"object"

变量就是用来代表值和存储值的
 typeof typeof [] => 最终结果是 "string"

//三个判断:if else, 三元运算符, switch case

//if,else if,else 是最常用的判断,可以解决js中所有的判断需求

//三元运算符应用于简单的if else情况
//switch case应用于不同值情况下的不同操作

if(条件1){
执行条件1成立的js代码
}else if(条件2){
 执行条件2成立的js代码
}else if(条件3){
执行条件3成立的js代码
}...else{
以上天剑都不成立执行的代码
}

var num = 10;
if(num<0){
console.log("负数")
}else if(num>=0 && num<=10){
    console.log("0-10之间")
}else{
 console.log("10以上")
}

//三元运算符
//条件?条件成立执行:
/*var num=12
if(num>=0){
   console.log("正数或零")
}else{
console.log("负数")
}*/
num>=0?console.log("正数或零"):console.log("负数")

js中异步编程的四种情况:定时器是异步编程的,所有的事件绑定都是异步编程的,Ajax读取数据的时候,
我们一般都设置为异步编程,回调函数也是异步编程的



原型上都是不可枚举的
数据类型检测的四种方式
//1.typeof 用来检测数据类型的运算符

console.log(typeof 12);"number"
//->使用typeof检测数据类型,首先返回的都是一个字符串,其次，字符串中包含了对应的数据类型
例如 number,"string","boolean","undefined","function","object"
//局限性 typeof null->"object"
console.log(typeof typeof typeof function(){}) "string"
//->不能具体的细分是数组还是正则,还是对象中其他的值,因为使用typeof检测数据类型,
对于对象数据类型中的左右的值,最后返回的结果都是"object"
function(num1,num2){
  if(typeof num2 === "undefnied"){
  num2 = 0;
}
  num2 = num2 || 0;
fn(10,false);

function fn (callback){
  typeof callback === "function" ? callback() : null;
  callback && callback()


}
fn(function(){


})

}

//2.instanceof 检测某一个实例是否属于某个类
var obj = [12,23];
console.log(obj instanceof Array);
console.log(obj instanceof RegExp);

//局限性(多)
//1.不能用来及检测和处理字面量方式创建出来的基本数据类型
//对于基本数据类型来说,字面量创建出来的方式和实例创建出来的方式是有一定的缺别的
//从严格意义上讲,只有实例创建出来的结果才是标准的对象数据类型,也是Number的一个实例
,对于字面量创建出来的结果是基本数据类型值,不是严谨的实例,但是由于JS的松散特点,
导致了可以使用Number.prototype上提供的方法
console.log(1 instanceof Number);//false
console.log("" instanceof String);//false
console.log(true instanceof Boolean)//false
//console.log(new Number(1) instanceof Number);//true
//2.instanceof的特性:只要在当前实例的原型链上,我们用其检测出来的结果都为true
HTMLDivElement.prototype ->HTMLElement.prototype ->Element.prototype->Node.prototype
->Event.prototype->Event.prototype->object.prototype
oDiv instanceof EventTarget
//原型继承:让子类的原型等于父类的一个实例
function Fn() {

}
//在类的原型继承中,检测结果不一定准确
var ary=new Array;
将ary赋值给Fn.prototype
Fn.prototype = ary;//原型继承:让子类的一个原型等于父类的一个实例
var f = new Fn;
f->Fn.prototype->Array.prototype->Obect.prototype

//自己写一个类,作用是创建一个类数组(索引和length),但是可以使用数组的方法(在它的原型上就应该有Array.prototype了)




//3. constructor 构造函数 作用和instanceof非常的相似
var obj=[];
先找私有里面的有没有,如果没有就找prototype上面的,
obj是数组,找的就是数组上面的prototype
console.log(obj.constructor=== Array);

constructor可以处理基本数据类型的检测
var reg = /^$/;
console.log(reg.constructor === Object);//false
console.log(reg.constructor === RegExp);//true

//局限性:我们可以把类的原型进行重写,在重写的过程中,很有可能把之前写的constructor覆盖了,
这样检测的结果就不准确了


//对于特殊数据类型null和undefined,他们的所属类是Null和Undefined,但是浏览器把这两个
类保护起来了,不允许我们在外面访问使用

//对象数据类型的基类
//4.Object.prototype.toString.call() //最准确最常用的方法
//->首先获取Object原型上的toString方法,让方法执行,并改写方法中this的指向


//5.toString的理解

Object.prototype.toString它的作用是返回当前方法的执行主体(方法中this)所属类
的详细信息

var obj={name:"zhufeng"};
console.log(obj.toString());//->toString中的this是谁obj,返回的是obj所属类的信息
->"[object Object]" 第一个是object代表当前实例是对象数据类型的(这个是固定死的),
第二个Object代表的是obj所属的类是哪个类

//Math.toString() ->toString中的this是Math,那么返回的是Math所属类的信息->"[object Math]"

var ary = [];
console.log(Object.prototype.toString.call(ary));
->"[object Array]"
console.log(Object.prototype.toString.call(ary));
//"[object RegExp]"

console.log(({}).toString.call(new Date));//->[object Date]
console.log(Object.prototype.toString.call(1));
console.log(Object.prototype.toString.call("朱峰"));
console.log(Object.prototype.toString.call(true));
console.log(Object.prototype.toString.call(null));
console.log(Object.prototype.toString.call(undefined));
console.log(Object.prototype.toString.call(function(){}));
[object Number]
[object String]
[object Boolean]
[object Null]
[object Undefined]
[object Function]

所有类型都可以用来检测

var ary = []
console.log(Object.prototype.toString.call(ary)=== "[object Array]");
//true

var reg =/^\[object Array\]$/
console.log(reg.test(Object.prototype.toString.call(ary))) 

function Fn(){}
Fn.prototype = new Array;
var f = new Fn;
console.log(f instanceof Array);// ->true
console.log(Object.prototype.toString.call(f)) [object Object]







//->乍一看应该是转化为字符串,但某些toString方法不仅仅是转换为字符串
console.log((1).toString());Number.prototype.toString()
转化为字符串"1"(128).toString(2/8/10);把数字转化为二进制,八进制,十进制

布尔toString也是转化为字符串
null和undefinedtoString没有
数组转化为字符串
[12,23,34].toString() "12,23,34"
正则也可以转化为字符串
var date = new Date().toString()转化为字符串
//({name:"朱峰"}).toString()->"[object Object]"
//Math.toString() -> "[object ]"


(1).__proto__.proto__.toString()"[object Object]"


//对于Number,String,Boolean,Array,RegExp,Date.Function原型上的toString方法都是
把当前的数据类型转换为字符串的类型(它们的作用仅仅是用来转换为字符串的)
Object.prototype.toString()并不是用来转换为字符串的

