函数只是一个方法而已,方法本身没有什么意义的,只有执行这个方法,实现了对应的功能才有对应的价值

//洗衣机:具备洗衣服功能的一台机器
//函数有两部分组成:创建一个函数,执行这个函数

function 方法名(){
   //函数体:存放的是某个功能实现的JS代码
}
方法名();
方法名();

function sum(){
  var total=null;
  total = 1 + 1;
  console.log(total)
}
sum();
sum();
sum();


创建一个函数可以执行多次

//浏览器加载页面的时候首先会提供一个供JS代码执行的环境->"全局作用域"

//-创建一个函数
1)首先开辟一个新的内存空间,浏览器为其分配一个16进制的地址,
我们假设地址为:xfffffff这个地址里面存储的是一堆js代码
2)把函数体中的JS代码当做字符串存储到内存中(创建的时候存储的都是一堆字符串,函数此时本身没有任何意义)
3)再把这个地址赋值给当前的函数名sum ->sum=xxxfff000


function sum(){

}
sum不加小括号,代表的是当前函数本身
sum加小括号,代表的是执行当前函数

sum();//执行的目的:把函数之前存储的那些字符串变为JS代码,
然后让JS代码从上到下依次执行
//1)当函数执行的时候,首先会提供一个供函数体中代码执行的环境
->"私有作用域"
//2)把函数体中的代码字符串变为代码从上到下执行 

xxxfff执行,形成一个私有的作用域
var total = null;

var total = null;
total = 1 + 1 = 2;
console.log(total); ->2

函数执行的时候,首先会形成一个私有的作用域,供函数体中的代码
从上到下执行;形成的那个私有的作用域,把我们函数体中的代码都
包起来了,保护了里面的私有变量,不受外界干扰(外面获取不到也修改不了)
我们把函数执行的时候形成的这种保护机制叫做闭包


arguments函数天生自带的,用来接收函数传递进来的参数值的一个集合
//观察它发现,它是以数字作为索引,索引从零开始逐级递
0存储的是第一个参数的值,索引1存储的是第二个参数值,
有一个叫做length的属性代表一共传递了多少个参数;
--它不是数组,我们把它称之为类数组;

function sum(){
//arguments是一个类数组
   console.log(arguments)
}
var total = sum(100,200,300)